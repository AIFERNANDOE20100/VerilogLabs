$date
	Tue May 14 20:49:21 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_tb $end
$var wire 32 ! PC [31:0] $end
$var wire 32 " INSTRUCTION [31:0] $end
$var reg 1 # CLK $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 # CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 1 ' ZERO_and_BRANCHSELECT $end
$var wire 1 ( ZERO $end
$var wire 3 ) WRITEREG [2:0] $end
$var wire 1 * WRITEENABLE $end
$var wire 8 + TWOS_COMP_SELECTED [7:0] $end
$var wire 1 , TWOS_COMP_SELECT $end
$var wire 8 - TWOS_COMP [7:0] $end
$var wire 32 . SIGNEXTENDEDJUMP [31:0] $end
$var wire 32 / SIGNEXTENDEDBRANCH [31:0] $end
$var wire 8 0 REGOUT2 [7:0] $end
$var wire 8 1 REGOUT1 [7:0] $end
$var wire 3 2 READREG2 [2:0] $end
$var wire 3 3 READREG1 [2:0] $end
$var wire 32 4 PCOUT [31:0] $end
$var wire 8 5 OPCODE [7:0] $end
$var wire 32 6 NEXTPCOUT [31:0] $end
$var wire 32 7 LEFTSHIFTEDJUMP [31:0] $end
$var wire 32 8 LEFTSHIFTEDBRANCH [31:0] $end
$var wire 32 9 JUMP_SELECTED [31:0] $end
$var wire 1 : JUMP_SELECT $end
$var wire 8 ; JUMPINSTRUCTION [7:0] $end
$var wire 32 < JUMPADDRESS [31:0] $end
$var wire 8 = IMMIDIATE_SELECTED [7:0] $end
$var wire 1 > IMMIDIATE_SELECT $end
$var wire 8 ? IMMIDIATE [7:0] $end
$var wire 32 @ BRANCH_SELECTED [31:0] $end
$var wire 1 A BRANCH_SELECT $end
$var wire 8 B BRANCHINSTRUCTION [7:0] $end
$var wire 32 C BRANCHADDRESS [31:0] $end
$var wire 8 D ALURESULT [7:0] $end
$var wire 3 E ALUOP [2:0] $end
$scope module alu $end
$var wire 8 F SL_RESULT [7:0] $end
$var wire 3 G SELECT [2:0] $end
$var wire 8 H OR_RESULT [7:0] $end
$var wire 8 I MULT_RESULT [7:0] $end
$var wire 8 J MOV_RESULT [7:0] $end
$var wire 8 K DATA2 [7:0] $end
$var wire 8 L DATA1 [7:0] $end
$var wire 8 M AND_RESULT [7:0] $end
$var wire 8 N ADD_RESULT [7:0] $end
$var reg 8 O RESULT [7:0] $end
$var reg 1 ( ZERO $end
$scope module add1 $end
$var wire 8 P DATA2 [7:0] $end
$var wire 8 Q DATA1 [7:0] $end
$var reg 8 R RESULT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 S RESULT [7:0] $end
$var wire 8 T DATA2 [7:0] $end
$var wire 8 U DATA1 [7:0] $end
$upscope $end
$scope module mov1 $end
$var wire 8 V RESULT [7:0] $end
$var wire 8 W DATA2 [7:0] $end
$upscope $end
$scope module mult1 $end
$var wire 8 X RESULT [7:0] $end
$var wire 8 Y DATA2 [7:0] $end
$var wire 8 Z DATA1 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 [ RESULT [7:0] $end
$var wire 8 \ DATA2 [7:0] $end
$var wire 8 ] DATA1 [7:0] $end
$upscope $end
$scope module sl1 $end
$var wire 8 ^ SHIFTAMOUNT [7:0] $end
$var wire 8 _ DATA [7:0] $end
$var reg 8 ` RESULT [7:0] $end
$var integer 32 a i [31:0] $end
$upscope $end
$upscope $end
$scope module alu_immidiate_mux $end
$var wire 1 > SELECT $end
$var wire 8 b DATA2 [7:0] $end
$var wire 8 c DATA1 [7:0] $end
$var reg 8 d RESULT [7:0] $end
$upscope $end
$scope module branch_add $end
$var wire 32 e PCOUT [31:0] $end
$var wire 32 f LEFTSHIFTEDBRANCH [31:0] $end
$var reg 32 g BRANCHADDRESS [31:0] $end
$upscope $end
$scope module branch_and $end
$var wire 1 ( DATA2 $end
$var wire 1 ' RESULT $end
$var wire 1 A DATA1 $end
$upscope $end
$scope module branch_select_mux $end
$var wire 32 h DATA2 [31:0] $end
$var wire 1 ' SELECT $end
$var wire 32 i DATA1 [31:0] $end
$var reg 32 j RESULT [31:0] $end
$upscope $end
$scope module control_unit $end
$var wire 8 k OPCODE [7:0] $end
$var reg 3 l ALU_OP [2:0] $end
$var reg 1 A BRANCH_SELECT $end
$var reg 1 > IMMIDIATE_SELECT $end
$var reg 1 : JUMP_SELECT $end
$var reg 1 * REG_WRITE $end
$var reg 1 , TWOS_COMP $end
$upscope $end
$scope module instruction_decoder $end
$var wire 32 m INSTRUCTION [31:0] $end
$var reg 8 n BRANCHADDRESS [7:0] $end
$var reg 8 o IMMIDIATE [7:0] $end
$var reg 8 p JUMPADDRESS [7:0] $end
$var reg 8 q OPCODE [7:0] $end
$var reg 3 r REGISTER_1 [2:0] $end
$var reg 3 s REGISTER_2 [2:0] $end
$var reg 3 t REGISTER_DEST [2:0] $end
$upscope $end
$scope module jump_concatenate $end
$var wire 32 u PCOUT [31:0] $end
$var wire 32 v LEFTSHIFTEDJUMP [31:0] $end
$var reg 32 w JUMPADDRESS [31:0] $end
$upscope $end
$scope module jump_select_mux $end
$var wire 32 x DATA1 [31:0] $end
$var wire 32 y DATA2 [31:0] $end
$var wire 1 : SELECT $end
$var reg 32 z RESULT [31:0] $end
$upscope $end
$scope module left_shift_for_branch $end
$var wire 32 { INPUT [31:0] $end
$var reg 32 | OUTPUT [31:0] $end
$upscope $end
$scope module left_shift_for_jump $end
$var wire 32 } INPUT [31:0] $end
$var reg 32 ~ OUTPUT [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 # CLK $end
$var wire 1 $ RESET $end
$var wire 32 !" SELECTEDOUTPUT [31:0] $end
$var reg 32 "" NEXTPCOUT [31:0] $end
$var reg 32 #" PCOUT [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 # CLK $end
$var wire 8 $" IN [7:0] $end
$var wire 3 %" INADDRESS [2:0] $end
$var wire 8 &" OUT1 [7:0] $end
$var wire 3 '" OUT1ADDRESS [2:0] $end
$var wire 8 (" OUT2 [7:0] $end
$var wire 3 )" OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 * WRITE $end
$upscope $end
$scope module sign_extender_for_branch $end
$var wire 8 *" INPUT [7:0] $end
$var reg 32 +" OUTPUT [31:0] $end
$upscope $end
$scope module sign_extender_for_jump $end
$var wire 8 ," INPUT [7:0] $end
$var reg 32 -" OUTPUT [31:0] $end
$upscope $end
$scope module twos_complement_mux $end
$var wire 8 ." DATA1 [7:0] $end
$var wire 1 , SELECT $end
$var wire 8 /" DATA2 [7:0] $end
$var reg 8 0" RESULT [7:0] $end
$upscope $end
$scope module twoscomp $end
$var wire 8 1" DATA [7:0] $end
$var reg 8 2" RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 3" \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 4" \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 5" \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 6" \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 7" \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 8" \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 9" \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module cpu_tb $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 :" \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
bx @
bx ?
x>
bx =
bx <
bx ;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
x,
bx +
x*
bx )
x(
x'
bx &
b1000 %
1$
0#
bx "
bx !
$end
#4
1#
#5
b100 7
b100 v
b100 ~
b100 8
b100 f
b100 |
b1 .
b1 }
b1 -"
b1 /
b1 {
b1 +"
b1 ;
b1 p
b1 ,"
b1 B
b1 n
b1 *"
b11 ?
b11 b
b11 o
b1 )
b1 t
b1 %"
b11 2
b11 s
b11 )"
b0 3
b0 r
b0 '"
b0 5
b0 k
b0 q
b10000000000000011 "
b10000000000000011 &
b10000000000000011 m
b0 !
b0 4
b0 #"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
#6
b100 9
b100 z
b100 !"
b1000 C
b1000 g
b1000 h
b100 @
b100 j
b100 x
b1000 <
b1000 w
b1000 y
b100 6
b100 e
b100 i
b100 u
b100 ""
bx11 H
bx11 [
b0xx M
b0xx S
b11 a
0'
b11 J
b11 V
b11 =
b11 K
b11 P
b11 T
b11 W
b11 Y
b11 \
b11 ^
b11 d
0:
0A
1*
1>
0,
b0 E
b0 G
b0 l
0$
#7
0(
b0 +
b0 c
b0 0"
b11 H
b11 [
b0 M
b0 S
b11 N
b11 R
b11 a
b0 F
b0 `
b11 D
b11 O
b11 $"
b0 0
b0 ("
b0 ."
b0 1"
b0 I
b0 X
b0 1
b0 L
b0 Q
b0 U
b0 Z
b0 ]
b0 _
b0 &"
#8
b0 -
b0 /"
b0 2"
0#
#12
1#
#13
b1100 <
b1100 w
b1100 y
b1100 C
b1100 g
b1100 h
b1000 7
b1000 v
b1000 ~
b1000 8
b1000 f
b1000 |
b100 H
b100 [
b100 N
b100 R
b100 a
b10 .
b10 }
b10 -"
b10 /
b10 {
b10 +"
b100 J
b100 V
b100 =
b100 K
b100 P
b100 T
b100 W
b100 Y
b100 \
b100 ^
b100 d
b10 ;
b10 p
b10 ,"
b10 B
b10 n
b10 *"
b100 ?
b100 b
b100 o
b10 )
b10 t
b10 %"
b100 2
b100 s
b100 )"
b11 4"
b100000000000000100 "
b100000000000000100 &
b100000000000000100 m
b100 !
b100 4
b100 #"
#14
b1000 9
b1000 z
b1000 !"
b10000 C
b10000 g
b10000 h
b1000 @
b1000 j
b1000 x
b10000 <
b10000 w
b10000 y
b1000 6
b1000 e
b1000 i
b1000 u
b1000 ""
b100 D
b100 O
b100 $"
#16
0#
#20
1#
#21
b11000 <
b11000 w
b11000 y
b11000 C
b11000 g
b11000 h
b10000 7
b10000 v
b10000 ~
b10000 8
b10000 f
b10000 |
b10 H
b10 [
b10 N
b10 R
b10 a
b100 .
b100 }
b100 -"
b100 /
b100 {
b100 +"
b10 J
b10 V
b10 =
b10 K
b10 P
b10 T
b10 W
b10 Y
b10 \
b10 ^
b10 d
b100 ;
b100 p
b100 ,"
b100 B
b100 n
b100 *"
b10 ?
b10 b
b10 o
b100 )
b100 t
b100 %"
b10 2
b10 s
b10 )"
b1 3
b1 r
b1 '"
b1000 5
b1000 k
b1000 q
b1000000001000000000100000010 "
b1000000001000000000100000010 &
b1000000001000000000100000010 m
b1000 !
b1000 4
b1000 #"
b100 5"
#22
b1100 9
b1100 z
b1100 !"
b11100 C
b11100 g
b11100 h
b1100 @
b1100 j
b1100 x
b11100 <
b11100 w
b11100 y
b1100 6
b1100 e
b1100 i
b1100 u
b1100 ""
1(
b0 H
b0 [
b0 N
b0 R
b0 a
b0 J
b0 V
b0 =
b0 K
b0 P
b0 T
b0 W
b0 Y
b0 \
b0 ^
b0 d
b10 D
b10 O
b10 $"
0>
b100 E
b100 G
b100 l
#23
b100 a
b1100 I
b1100 X
b100 J
b100 V
b100 =
b100 K
b100 P
b100 T
b100 W
b100 Y
b100 \
b100 ^
b100 d
0(
b100 +
b100 c
b100 0"
b111 H
b111 [
b111 N
b111 R
b110000 F
b110000 `
b100 0
b100 ("
b100 ."
b100 1"
b11 1
b11 L
b11 Q
b11 U
b11 Z
b11 ]
b11 _
b11 &"
#24
b11111100 -
b11111100 /"
b11111100 2"
b1100 D
b1100 O
b1100 $"
0#
#28
1#
#29
b11111110 ?
b11111110 b
b11111110 o
b110 2
b110 s
b110 )"
b100 3
b100 r
b100 '"
b1001 5
b1001 k
b1001 q
b1100 7"
b1001000001000000010011111110 "
b1001000001000000010011111110 &
b1001000001000000010011111110 m
b1100 !
b1100 4
b1100 #"
#30
b10000 9
b10000 z
b10000 !"
b100000 C
b100000 g
b100000 h
b10000 @
b10000 j
b10000 x
b100000 <
b100000 w
b100000 y
b10000 6
b10000 e
b10000 i
b10000 u
b10000 ""
b11111111 H
b11111111 [
b10 M
b10 S
b1 N
b1 R
b11111110 a
b0 F
b0 `
b11111010 I
b11111010 X
b11111110 J
b11111110 V
b11111110 =
b11111110 K
b11111110 P
b11111110 T
b11111110 W
b11111110 Y
b11111110 \
b11111110 ^
b11111110 d
1>
b101 E
b101 G
b101 l
#31
b0 +
b0 c
b0 0"
b11111110 H
b11111110 [
b1100 M
b1100 S
b1010 N
b1010 R
b11111110 a
b0 F
b0 `
b0 0
b0 ("
b0 ."
b0 1"
b11101000 I
b11101000 X
b1100 1
b1100 L
b1100 Q
b1100 U
b1100 Z
b1100 ]
b1100 _
b1100 &"
#32
b0 -
b0 /"
b0 2"
b0 D
b0 O
b0 $"
0#
#36
1#
#37
bx <
bx w
bx y
bx C
bx g
bx h
b0xxxxxxxx00 7
b0xxxxxxxx00 v
b0xxxxxxxx00 ~
b0xxxxxxxx00 8
b0xxxxxxxx00 f
b0xxxxxxxx00 |
bx11xx H
bx11xx [
b0xx00 M
b0xx00 S
bx N
bx R
b1100 F
b1100 `
b0xxxxxxxx .
b0xxxxxxxx }
b0xxxxxxxx -"
b0xxxxxxxx /
b0xxxxxxxx {
b0xxxxxxxx +"
bx I
bx X
bx J
bx V
bx =
bx K
bx P
bx T
bx W
bx Y
bx \
bx ^
bx d
bx ;
bx p
bx ,"
bx B
bx n
bx *"
bx ?
bx b
bx o
bx )
bx t
bx %"
bx 2
bx s
bx )"
bx 3
bx r
bx '"
bx 5
bx k
bx q
bx "
bx &
bx m
b10000 !
b10000 4
b10000 #"
b0 7"
#38
b10100 9
b10100 z
b10100 !"
b10100 @
b10100 j
b10100 x
b10100 6
b10100 e
b10100 i
b10100 u
b10100 ""
b1100 H
b1100 [
b0 M
b0 S
b1100 N
b1100 R
b0 a
b0 I
b0 X
b0 J
b0 V
b0 =
b0 K
b0 P
b0 T
b0 W
b0 Y
b0 \
b0 ^
b0 d
0*
0>
b0 E
b0 G
b0 l
#39
bx M
bx S
bx J
bx V
bx =
bx K
bx P
bx T
bx W
bx Y
bx \
bx ^
bx d
bx +
bx c
bx 0"
bx H
bx [
bx N
bx R
bx F
bx `
b1100 D
b1100 O
b1100 $"
bx 0
bx ("
bx ."
bx 1"
bx I
bx X
bx 1
bx L
bx Q
bx U
bx Z
bx ]
bx _
bx &"
#40
bx D
bx O
bx $"
bx -
bx /"
bx 2"
0#
#44
1#
#45
b10100 !
b10100 4
b10100 #"
#46
b11000 9
b11000 z
b11000 !"
b11000 @
b11000 j
b11000 x
b11000 6
b11000 e
b11000 i
b11000 u
b11000 ""
#48
0#
#52
1#
#53
b11000 !
b11000 4
b11000 #"
#54
b11100 9
b11100 z
b11100 !"
b11100 @
b11100 j
b11100 x
b11100 6
b11100 e
b11100 i
b11100 u
b11100 ""
#56
0#
#60
1#
#61
b11100 !
b11100 4
b11100 #"
#62
b100000 9
b100000 z
b100000 !"
b100000 @
b100000 j
b100000 x
b100000 6
b100000 e
b100000 i
b100000 u
b100000 ""
#64
0#
#68
1#
#69
b100000 !
b100000 4
b100000 #"
#70
b100100 9
b100100 z
b100100 !"
b100100 @
b100100 j
b100100 x
b100100 6
b100100 e
b100100 i
b100100 u
b100100 ""
#72
0#
#76
1#
#77
b100100 !
b100100 4
b100100 #"
#78
b101000 9
b101000 z
b101000 !"
b101000 @
b101000 j
b101000 x
b101000 6
b101000 e
b101000 i
b101000 u
b101000 ""
#80
0#
#84
1#
#85
b101000 !
b101000 4
b101000 #"
#86
b101100 9
b101100 z
b101100 !"
b101100 @
b101100 j
b101100 x
b101100 6
b101100 e
b101100 i
b101100 u
b101100 ""
#88
0#
#92
1#
#93
b101100 !
b101100 4
b101100 #"
#94
b110000 9
b110000 z
b110000 !"
b110000 @
b110000 j
b110000 x
b110000 6
b110000 e
b110000 i
b110000 u
b110000 ""
#96
0#
#100
1#
#101
b110000 !
b110000 4
b110000 #"
#102
b110100 9
b110100 z
b110100 !"
b110100 @
b110100 j
b110100 x
b110100 6
b110100 e
b110100 i
b110100 u
b110100 ""
#104
0#
#108
1#
#109
b110100 !
b110100 4
b110100 #"
#110
b111000 9
b111000 z
b111000 !"
b111000 @
b111000 j
b111000 x
b111000 6
b111000 e
b111000 i
b111000 u
b111000 ""
#112
0#
#116
1#
#117
b111000 !
b111000 4
b111000 #"
#118
b111100 9
b111100 z
b111100 !"
b111100 @
b111100 j
b111100 x
b111100 6
b111100 e
b111100 i
b111100 u
b111100 ""
#120
0#
#124
1#
#125
b111100 !
b111100 4
b111100 #"
#126
b1000000 9
b1000000 z
b1000000 !"
b1000000 @
b1000000 j
b1000000 x
b1000000 6
b1000000 e
b1000000 i
b1000000 u
b1000000 ""
#128
0#
#132
1#
#133
b1000000 !
b1000000 4
b1000000 #"
#134
b1000100 9
b1000100 z
b1000100 !"
b1000100 @
b1000100 j
b1000100 x
b1000100 6
b1000100 e
b1000100 i
b1000100 u
b1000100 ""
#136
0#
#140
1#
#141
b1000100 !
b1000100 4
b1000100 #"
#142
b1001000 9
b1001000 z
b1001000 !"
b1001000 @
b1001000 j
b1001000 x
b1001000 6
b1001000 e
b1001000 i
b1001000 u
b1001000 ""
#144
0#
#148
1#
#149
b1001000 !
b1001000 4
b1001000 #"
#150
b1001100 9
b1001100 z
b1001100 !"
b1001100 @
b1001100 j
b1001100 x
b1001100 6
b1001100 e
b1001100 i
b1001100 u
b1001100 ""
#152
0#
#156
1#
#157
b1001100 !
b1001100 4
b1001100 #"
#158
b1010000 9
b1010000 z
b1010000 !"
b1010000 @
b1010000 j
b1010000 x
b1010000 6
b1010000 e
b1010000 i
b1010000 u
b1010000 ""
#160
0#
#164
1#
#165
b1010000 !
b1010000 4
b1010000 #"
#166
b1010100 9
b1010100 z
b1010100 !"
b1010100 @
b1010100 j
b1010100 x
b1010100 6
b1010100 e
b1010100 i
b1010100 u
b1010100 ""
#168
0#
#172
1#
#173
b1010100 !
b1010100 4
b1010100 #"
#174
b1011000 9
b1011000 z
b1011000 !"
b1011000 @
b1011000 j
b1011000 x
b1011000 6
b1011000 e
b1011000 i
b1011000 u
b1011000 ""
#176
0#
#180
1#
#181
b1011000 !
b1011000 4
b1011000 #"
#182
b1011100 9
b1011100 z
b1011100 !"
b1011100 @
b1011100 j
b1011100 x
b1011100 6
b1011100 e
b1011100 i
b1011100 u
b1011100 ""
#184
0#
#188
1#
#189
b1011100 !
b1011100 4
b1011100 #"
#190
b1100000 9
b1100000 z
b1100000 !"
b1100000 @
b1100000 j
b1100000 x
b1100000 6
b1100000 e
b1100000 i
b1100000 u
b1100000 ""
#192
0#
#196
1#
#197
b1100000 !
b1100000 4
b1100000 #"
#198
b1100100 9
b1100100 z
b1100100 !"
b1100100 @
b1100100 j
b1100100 x
b1100100 6
b1100100 e
b1100100 i
b1100100 u
b1100100 ""
#200
0#
#204
1#
#205
b1100100 !
b1100100 4
b1100100 #"
#206
b1101000 9
b1101000 z
b1101000 !"
b1101000 @
b1101000 j
b1101000 x
b1101000 6
b1101000 e
b1101000 i
b1101000 u
b1101000 ""
#208
0#
#212
1#
#213
b1101000 !
b1101000 4
b1101000 #"
#214
b1101100 9
b1101100 z
b1101100 !"
b1101100 @
b1101100 j
b1101100 x
b1101100 6
b1101100 e
b1101100 i
b1101100 u
b1101100 ""
#216
0#
#220
1#
#221
b1101100 !
b1101100 4
b1101100 #"
#222
b1110000 9
b1110000 z
b1110000 !"
b1110000 @
b1110000 j
b1110000 x
b1110000 6
b1110000 e
b1110000 i
b1110000 u
b1110000 ""
#224
0#
#228
1#
#229
b1110000 !
b1110000 4
b1110000 #"
#230
b1110100 9
b1110100 z
b1110100 !"
b1110100 @
b1110100 j
b1110100 x
b1110100 6
b1110100 e
b1110100 i
b1110100 u
b1110100 ""
#232
0#
#236
1#
#237
b1110100 !
b1110100 4
b1110100 #"
#238
b1111000 9
b1111000 z
b1111000 !"
b1111000 @
b1111000 j
b1111000 x
b1111000 6
b1111000 e
b1111000 i
b1111000 u
b1111000 ""
#240
0#
#244
1#
#245
b1111000 !
b1111000 4
b1111000 #"
#246
b1111100 9
b1111100 z
b1111100 !"
b1111100 @
b1111100 j
b1111100 x
b1111100 6
b1111100 e
b1111100 i
b1111100 u
b1111100 ""
#248
0#
#252
1#
#253
b1111100 !
b1111100 4
b1111100 #"
#254
b10000000 9
b10000000 z
b10000000 !"
b10000000 @
b10000000 j
b10000000 x
b10000000 6
b10000000 e
b10000000 i
b10000000 u
b10000000 ""
#256
0#
#260
1#
#261
b10000000 !
b10000000 4
b10000000 #"
#262
b10000100 9
b10000100 z
b10000100 !"
b10000100 @
b10000100 j
b10000100 x
b10000100 6
b10000100 e
b10000100 i
b10000100 u
b10000100 ""
#264
0#
#268
1#
#269
b10000100 !
b10000100 4
b10000100 #"
#270
b10001000 9
b10001000 z
b10001000 !"
b10001000 @
b10001000 j
b10001000 x
b10001000 6
b10001000 e
b10001000 i
b10001000 u
b10001000 ""
#272
0#
#276
1#
#277
b10001000 !
b10001000 4
b10001000 #"
#278
b10001100 9
b10001100 z
b10001100 !"
b10001100 @
b10001100 j
b10001100 x
b10001100 6
b10001100 e
b10001100 i
b10001100 u
b10001100 ""
#280
0#
#284
1#
#285
b10001100 !
b10001100 4
b10001100 #"
#286
b10010000 9
b10010000 z
b10010000 !"
b10010000 @
b10010000 j
b10010000 x
b10010000 6
b10010000 e
b10010000 i
b10010000 u
b10010000 ""
#288
0#
#292
1#
#293
b10010000 !
b10010000 4
b10010000 #"
#294
b10010100 9
b10010100 z
b10010100 !"
b10010100 @
b10010100 j
b10010100 x
b10010100 6
b10010100 e
b10010100 i
b10010100 u
b10010100 ""
#296
0#
#300
1#
#301
b10010100 !
b10010100 4
b10010100 #"
#302
b10011000 9
b10011000 z
b10011000 !"
b10011000 @
b10011000 j
b10011000 x
b10011000 6
b10011000 e
b10011000 i
b10011000 u
b10011000 ""
#304
0#
#306
 e
b10011000 i
b10011000 u
b10011000 ""
#304
0#
#306
