$date
	Wed Jun 26 11:08:47 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module icache $end
$var reg 128 ! \cacheblock_array[0] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 " \cacheblock_array[1] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 # \cacheblock_array[2] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 $ \cacheblock_array[3] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 % \cacheblock_array[4] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 & \cacheblock_array[5] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 ' \cacheblock_array[6] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 128 ( \cacheblock_array[7] [127:0] $end
$upscope $end
$scope module icache $end
$var reg 3 ) \tagArray[0] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 * \tagArray[1] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 + \tagArray[2] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 , \tagArray[3] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 - \tagArray[4] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 . \tagArray[5] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 / \tagArray[6] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 3 0 \tagArray[7] [2:0] $end
$upscope $end
$scope module icache $end
$var reg 1 1 \valid_array[0] $end
$upscope $end
$scope module icache $end
$var reg 1 2 \valid_array[1] $end
$upscope $end
$scope module icache $end
$var reg 1 3 \valid_array[2] $end
$upscope $end
$scope module icache $end
$var reg 1 4 \valid_array[3] $end
$upscope $end
$scope module icache $end
$var reg 1 5 \valid_array[4] $end
$upscope $end
$scope module icache $end
$var reg 1 6 \valid_array[5] $end
$upscope $end
$scope module icache $end
$var reg 1 7 \valid_array[6] $end
$upscope $end
$scope module icache $end
$var reg 1 8 \valid_array[7] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
x8
x7
x6
x5
x4
x3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#2
