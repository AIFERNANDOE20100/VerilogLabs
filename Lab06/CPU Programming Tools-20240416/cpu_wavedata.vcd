$date
	Sun May 05 18:27:33 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Testbench $end
$var wire 32 ! PC [31:0] $end
$var reg 1 " CLK $end
$var reg 32 # INSTRUCTION [31:0] $end
$var reg 1 $ RESET $end
$var integer 32 % i [31:0] $end
$scope module mycpu $end
$var wire 1 " CLK $end
$var wire 32 & INSTRUCTION [31:0] $end
$var wire 1 $ RESET $end
$var wire 3 ' WRITEREG [2:0] $end
$var wire 1 ( WRITEENABLE $end
$var wire 8 ) TWOS_COMP_SELECTED [7:0] $end
$var wire 1 * TWOS_COMP_SELECT $end
$var wire 8 + TWOS_COMP [7:0] $end
$var wire 8 , REGOUT2 [7:0] $end
$var wire 8 - REGOUT1 [7:0] $end
$var wire 3 . READREG2 [2:0] $end
$var wire 3 / READREG1 [2:0] $end
$var wire 32 0 PCOUT [31:0] $end
$var wire 8 1 OPCODE [7:0] $end
$var wire 8 2 IMMIDIATE_SELECTED [7:0] $end
$var wire 1 3 IMMIDIATE_SELECT $end
$var wire 8 4 IMMIDIATE [7:0] $end
$var wire 8 5 ALURESULT [7:0] $end
$var wire 3 6 ALUOP [2:0] $end
$scope module alu $end
$var wire 3 7 SELECT [2:0] $end
$var wire 8 8 OR_RESULT [7:0] $end
$var wire 8 9 MOV_RESULT [7:0] $end
$var wire 8 : DATA2 [7:0] $end
$var wire 8 ; DATA1 [7:0] $end
$var wire 8 < AND_RESULT [7:0] $end
$var wire 8 = ADD_RESULT [7:0] $end
$var reg 8 > RESULT [7:0] $end
$scope module add1 $end
$var wire 8 ? DATA2 [7:0] $end
$var wire 8 @ DATA1 [7:0] $end
$var reg 8 A RESULT [7:0] $end
$upscope $end
$scope module and1 $end
$var wire 8 B RESULT [7:0] $end
$var wire 8 C DATA2 [7:0] $end
$var wire 8 D DATA1 [7:0] $end
$upscope $end
$scope module mov1 $end
$var wire 8 E RESULT [7:0] $end
$var wire 8 F DATA2 [7:0] $end
$upscope $end
$scope module or1 $end
$var wire 8 G RESULT [7:0] $end
$var wire 8 H DATA2 [7:0] $end
$var wire 8 I DATA1 [7:0] $end
$upscope $end
$upscope $end
$scope module alu_immidiate_mux $end
$var wire 1 3 SELECT $end
$var wire 8 J DATA2 [7:0] $end
$var wire 8 K DATA1 [7:0] $end
$var reg 8 L RESULT [7:0] $end
$upscope $end
$scope module control_unit $end
$var wire 8 M OPCODE [7:0] $end
$var reg 3 N ALU_OP [2:0] $end
$var reg 1 3 ALU_SRC $end
$var reg 1 ( REG_WRITE $end
$var reg 1 * TWOS_COMP $end
$upscope $end
$scope module instruction_decoder $end
$var wire 32 O INSTRUCTION [31:0] $end
$var reg 8 P IMMIDIATE [7:0] $end
$var reg 8 Q OPCODE [7:0] $end
$var reg 3 R REGISTER_1 [2:0] $end
$var reg 3 S REGISTER_2 [2:0] $end
$var reg 3 T REGISTER_DEST [2:0] $end
$upscope $end
$scope module pc $end
$var wire 1 " CLK $end
$var wire 1 $ RESET $end
$var reg 32 U RESULT [31:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 " CLK $end
$var wire 8 V IN [7:0] $end
$var wire 3 W INADDRESS [2:0] $end
$var wire 8 X OUT1 [7:0] $end
$var wire 3 Y OUT1ADDRESS [2:0] $end
$var wire 8 Z OUT2 [7:0] $end
$var wire 3 [ OUT2ADDRESS [2:0] $end
$var wire 1 $ RESET $end
$var wire 1 ( WRITE $end
$upscope $end
$scope module twos_complement_mux $end
$var wire 8 \ DATA1 [7:0] $end
$var wire 1 * SELECT $end
$var wire 8 ] DATA2 [7:0] $end
$var reg 8 ^ RESULT [7:0] $end
$upscope $end
$scope module twoscomp $end
$var wire 8 _ DATA [7:0] $end
$var reg 8 ` RESULT [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 a \registers[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 b \registers[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 c \registers[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 d \registers[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 e \registers[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 f \registers[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 g \registers[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Testbench $end
$scope module mycpu $end
$scope module reg_file $end
$var reg 8 h \registers[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
b0 U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
b0 0
bx /
bx .
bx -
bx ,
bx +
x*
bx )
x(
bx '
bx &
b1000 %
1$
bx #
0"
b0 !
$end
#2
b1000000000000000101 #
b1000000000000000101 &
b1000000000000000101 O
#3
bx1x1 8
bx1x1 G
b0x0x <
b0x0x B
b101 9
b101 E
b101 2
b101 :
b101 ?
b101 C
b101 F
b101 H
b101 L
1(
13
0*
b0 6
b0 7
b0 N
b101 4
b101 J
b101 P
b100 '
b100 T
b100 W
b101 .
b101 S
b101 [
b0 /
b0 R
b0 Y
b0 1
b0 M
b0 Q
#4
b101 5
b101 >
b101 V
1"
#5
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
#6
0$
#7
b0 )
b0 K
b0 ^
b101 8
b101 G
b0 <
b0 B
b101 =
b101 A
b0 ,
b0 Z
b0 \
b0 _
b0 -
b0 ;
b0 @
b0 D
b0 I
b0 X
#8
b0 +
b0 ]
b0 `
0"
#12
1"
#13
b100 !
b100 0
b100 U
b101 e
#15
b100000000000001001 #
b100000000000001001 &
b100000000000001001 O
#16
b1001 8
b1001 G
b1001 =
b1001 A
b1001 9
b1001 E
b1001 2
b1001 :
b1001 ?
b1001 C
b1001 F
b1001 H
b1001 L
b1001 4
b1001 J
b1001 P
b10 '
b10 T
b10 W
b1 .
b1 S
b1 [
0"
#17
b1001 5
b1001 >
b1001 V
#20
1"
#21
b1000 !
b1000 0
b1000 U
b1001 c
#23
b10000001100000010000000010 #
b10000001100000010000000010 &
b10000001100000010000000010 O
#24
b0 8
b0 G
b0 =
b0 A
b0 9
b0 E
b0 2
b0 :
b0 ?
b0 C
b0 F
b0 H
b0 L
03
b1 6
b1 7
b1 N
b10 4
b10 J
b10 P
b110 '
b110 T
b110 W
b10 .
b10 S
b10 [
b100 /
b100 R
b100 Y
b10 1
b10 M
b10 Q
0"
#26
b1 <
b1 B
b1001 9
b1001 E
b1001 2
b1001 :
b1001 ?
b1001 C
b1001 F
b1001 H
b1001 L
b1001 )
b1001 K
b1001 ^
b1101 8
b1101 G
b1110 =
b1110 A
b0 5
b0 >
b0 V
b1001 ,
b1001 Z
b1001 \
b1001 _
b101 -
b101 ;
b101 @
b101 D
b101 I
b101 X
#27
b11110111 +
b11110111 ]
b11110111 `
#28
b1110 5
b1110 >
b1110 V
1"
#29
b1100 !
b1100 0
b1100 U
b1110 g
#31
b1000000000000000000000110 #
b1000000000000000000000110 &
b1000000000000000000000110 O
#32
b0 6
b0 7
b0 N
b110 4
b110 J
b110 P
b0 '
b0 T
b0 W
b110 .
b110 S
b110 [
b0 /
b0 R
b0 Y
b1 1
b1 M
b1 Q
0"
#33
b1001 5
b1001 >
b1001 V
#34
b1110 9
b1110 E
b1110 2
b1110 :
b1110 ?
b1110 C
b1110 F
b1110 H
b1110 L
b1110 )
b1110 K
b1110 ^
b1110 8
b1110 G
b0 <
b0 B
b1110 =
b1110 A
b1110 ,
b1110 Z
b1110 \
b1110 _
b0 -
b0 ;
b0 @
b0 D
b0 I
b0 X
#35
b1110 5
b1110 >
b1110 V
b11110010 +
b11110010 ]
b11110010 `
#36
1"
#37
b10000 !
b10000 0
b10000 U
b1110 a
#39
b1110 <
b1110 B
b11100 =
b11100 A
b10000000000000001 #
b10000000000000001 &
b10000000000000001 O
b1110 -
b1110 ;
b1110 @
b1110 D
b1110 I
b1110 X
#40
b1111 8
b1111 G
b0 <
b0 B
b1111 =
b1111 A
b1 9
b1 E
b1 2
b1 :
b1 ?
b1 C
b1 F
b1 H
b1 L
13
b1 4
b1 J
b1 P
b1 '
b1 T
b1 W
b1 .
b1 S
b1 [
b0 1
b0 M
b0 Q
0"
#41
b1 5
b1 >
b1 V
#42
b0 )
b0 K
b0 ^
b0 ,
b0 Z
b0 \
b0 _
#43
b0 +
b0 ]
b0 `
#44
1"
#45
b10100 !
b10100 0
b10100 U
b1 b
#47
b1 )
b1 K
b1 ^
b10000000100000001000000001 #
b10000000100000001000000001 &
b10000000100000001000000001 O
b1 ,
b1 Z
b1 \
b1 _
#48
03
b1 6
b1 7
b1 N
b10 '
b10 T
b10 W
b10 /
b10 R
b10 Y
b10 1
b10 M
b10 Q
b11111111 +
b11111111 ]
b11111111 `
0"
#50
b1001 8
b1001 G
b1 <
b1 B
b1010 =
b1010 A
b1111 5
b1111 >
b1111 V
b1001 -
b1001 ;
b1001 @
b1001 D
b1001 I
b1001 X
#52
b1010 5
b1010 >
b1010 V
1"
#53
b11000 !
b11000 0
b11000 U
b1010 c
#55
b1011 8
b1011 G
b0 <
b0 B
b1011 =
b1011 A
b1010 -
b1010 ;
b1010 @
b1010 D
b1010 I
b1010 X
#56
0"
#57
b1011 5
b1011 >
b1011 V
#60
1"
#61
b11100 !
b11100 0
b11100 U
b1011 c
#63
b1 <
b1 B
b1100 =
b1100 A
b1011 -
b1011 ;
b1011 @
b1011 D
b1011 I
b1011 X
#64
0"
#65
b1100 5
b1100 >
b1100 V
#68
1"
#69
b100000 !
b100000 0
b100000 U
b1100 c
#71
b1101 8
b1101 G
b0 <
b0 B
b1101 =
b1101 A
b1100 -
b1100 ;
b1100 @
b1100 D
b1100 I
b1100 X
#72
0"
#73
b1101 5
b1101 >
b1101 V
#76
1"
#77
b100100 !
b100100 0
b100100 U
b1101 c
#79
b1 <
b1 B
b1110 =
b1110 A
b1101 -
b1101 ;
b1101 @
b1101 D
b1101 I
b1101 X
#80
0"
#81
b1110 5
b1110 >
b1110 V
#84
1"
#85
b101000 !
b101000 0
b101000 U
b1110 c
#87
b1111 8
b1111 G
b0 <
b0 B
b1111 =
b1111 A
b1110 -
b1110 ;
b1110 @
b1110 D
b1110 I
b1110 X
#88
0"
#89
b1111 5
b1111 >
b1111 V
#92
1"
#93
b101100 !
b101100 0
b101100 U
b1111 c
#95
b1 <
b1 B
b10000 =
b10000 A
b1111 -
b1111 ;
b1111 @
b1111 D
b1111 I
b1111 X
#96
0"
#97
b10000 5
b10000 >
b10000 V
#100
1"
#101
b110000 !
b110000 0
b110000 U
b10000 c
#103
b10001 8
b10001 G
b0 <
b0 B
b10001 =
b10001 A
b10000 -
b10000 ;
b10000 @
b10000 D
b10000 I
b10000 X
#104
0"
#105
b10001 5
b10001 >
b10001 V
#106
